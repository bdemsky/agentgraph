New syntax rules...

1. Make assignments to new mutable objects only (can't copy references
to mutable objects).  Only one variable allowed to reference mutable
object.

Short Term Todo Items:
1. Code for assembling messages
2. Code to snapshot variables automatically
3. Eliminate maps and just use variable names
4. Early enabling variables from GraphExit Node
5. Futures for getting results out of computation
6. Build example
7. Add debugging support:
  a. Strict debugging support, memoize queries, don't generate query if we have it
  b. Support outputting problematic chat history as python program for debugging

Long Term Todo Items:
1. Support for RAG
2. Build benchmarks
3. Revisit mutable variable assignment restrictions

Message support:
1. Need way to summarize Conversation
2. Need way to interleave two conversations
3. Need way to prepend/append to conversation
4. Need way to work in prompts...
5. Should construct function to do this...
6. Need way to construct system message...
7. Fix Conversation binding...should probably be via variables...

Idea...What if prompts & variables all subclassed messages...messages then allowd basic combination operations...  pass in message object, call eval operator on it...could even generate input variables automatically

ideas:
Basic building blocks in dataflow language
Can be dynamic, by dynamic needs to be controlled by code

function
	block

pipeline
	sequency of blocks

for_parallel
	work splitter
	worker
	work combiner

if
	branch decider
	taken block
	else block

do while
	block
	condition b

call
-----------------
-- query construction language

-- response constraint language

-- state
   file system abstraction
   
High level goals
----------------------
1. Parallelism is important -- minimizes runtime, and can yield efficiency benefits with batching on local setups
2. Debuggability is important -- need way to avoid rerunning everything
3. Performance doesn't matter at python level -- most cost is in LLM
4. Data size is small


Execution engine
1. Implemented with openai async, runs in its own thread
2. Have number of concurrent calls via coroutines...
3. Each block gets offloaded onto async thread...

	  
Ideas:
	  
1.  Use OOOJava SESE regions...call them NestedGraphs... (DONE)

2. Track values of variables between nodes...  Run a node when its dependencies get to 0. (DONE)

3. Need to deal with Agent state...  (TODO)


Execution Engine:
1. Single executor thread
2. Several coroutines
3. Each language construct has routines to list results it needs
4. Preferring earlier tasks (TODO)

Variable objects:
1. Serve as names/keys for transmitting values.
2. Variable objects don't directly store anything.


Need support for multable state object

Mergable file systems??
